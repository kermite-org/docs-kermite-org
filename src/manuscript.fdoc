#chapter データ構造概要

#----
#section プロジェクトとは?

#text
(a.k.a キーボード定義, パッケージ)
Kermiteでは、キーボードの品種に対応したリソースのセットをプロジェクトと呼んでいます。
プロジェクトには、複数のファームウェアの定義、キーレイアウトの定義、プリセットプロファイルが含まれます。

#image url=https://i.gyazo.com/4e7bb84889123db7db05138e1841c137.png

#image url=https://i.gyazo.com/bafa903d5b76fe89bb1126200c39c16f.png; size=half; remark=プロジェクト選択画面
#image url=https://i.gyazo.com/0c1364671fc97a1076ab040be9264037.png; size=half; remark=プロジェクトリソースの編集画面

#text
キーボード作者は、ファームウェアやレイアウト、プリセットなどのリソースをまとめたローカルパッケージを作成し、KermiteServerにパッケージ申請を送ります。申請されたパッケージはオンラインパッケージとしてWebアプリから利用できるようになります。

#text
キーボードのユーザは、オンラインパッケージに含まれるプリセットや、単体で投稿されているユーザプロファイルを元に自分のプロファイルを作成し、キーボードにキーマッピングを書き込んで使用します。

#text
ユーザは自分用にカスタマイズしたプロファイルをKermiteServerに投稿することができます。投稿されたプロファイルは他のユーザが取得して利用できるようになります。

#----
#section プロファイルとは?

#text
Kermiteでは、キーマッピングを含むキーボードの設定をプロファイルと読んでいます。
プロファイルには、キーマッピングとそのプロファイル固有のキーレイアウトが含まれています。

#image url=http://foo.bar.com/buzz2.png


#----
#section レイヤの動作

#head2 キーアサインの探索処理の動作

#text
Kermiteでは、キーマッピングのレイヤを16個まで作成できます。
キーが押されたときに適用されるアサインの探索処理について説明します。

#image url=http://foo.bar.com/buzz2.png

#text
キーが押されたときに、全レイヤからアクティブなレイヤが抽出され、上のレイヤから順に探索が行われます。レイヤを順に調べ、レイヤ内で対象のキーに割り当てがあればそのアサインに対応する機能を実行して処理を終了します。キーに割り当てがないときには、下のレイヤに探索処理が引き継がれます。


#head2 デフォルトスキーム

#image url=http://foo.bar.com/buzz2.png

#text
レイヤにはデフォルトスキームという属性があり、探索時にアサインがない場合のデフォルトの動作を規定しています。デフォルトスキームをtransparentにすると、下のレイヤに探索処理が引き継がれます。blockにすると、アサインがない場合探索がそこで終了します。


#head2 ブロックアサインと透過アサイン

#image url=http://foo.bar.com/buzz2.png

レイヤのデフォルトスキームとは別に、レイヤ内のキーに対して、アサインがないときの処理をキーごとに個別に上書きして指定することができます。アサインパレットの左端にある、blockとtransがそれです。

#image url=http://foo.bar.com/buzz2.png

#text
キーボード表示上では、ブロックアサインは□、透過アサインは↡の記号で表示されます。

#head2 デフォルトアサインの表示

#image url=http://foo.bar.com/buzz2.png

#text
表示設定の'デフォルトアサインを表示'にチェックを入れると、レイヤのデフォルトスキーム属性に従って、アサインがないキーに対して灰色でデフォルトアサインが表示されます。

#table
none|Shiftキャンセル機能を使用しません。
shiftLayer|レイヤのアタッチドモディファイヤにShiftが含まれるレイヤ内でのみShiftキャンセル機能が有効になります。
all|全レイヤでShiftキャンセル機能が有効になります。

#section テスト

#head2 デフォルトスキーム