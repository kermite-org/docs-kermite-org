#chapter レイアウトエディタ

#-------
#section レイアウトエディタの座標単位について

#image url=https://i.gyazo.com/be893ccd874c79803829919194440cfe.png

#text
レイアウトエディタでは、キー配置時の座標値をキーピッチを基準にした座標単位で配置することができます。また、キーのキーピッチと独立して、キーの大きさ(実物のキーボードではキーキャップの大きさ)の基準値を指定できます。
キーの座標値の単位をKP(key pitchの略)、キーのサイズの単位をUで表しています。

#image url=https://i.gyazo.com/29d87266f1e0f2f2ca24fd704e6d152e.png

#text
キーの座標の単位にKPを使用した際の配置の例です。
座標が整数値となり扱いやすいようになっています。

#-------
#section 縦横でキーピッチが異なる場合の指定方法

#image url=https://i.gyazo.com/d710396314234bd3eecab72edf0d3858.png

#text
座標単位の指定に、値をスペースで区切って2つ入力すると、１つ目がX軸方向の値、2つ目がY軸方向の値として扱われます。

#-------
#section スナップ単位の設定

#image url=https://i.gyazo.com/77f3d18da372da8229d07a502b3ed685.png

#text
キーをドラッグして並べるときにスナップさせる座標単位をここで指定します。

#-------
#section キーのサイズ指定

#head2 横方向のサイズ指定
#image url=https://i.gyazo.com/5a1952f6421a4f7d796b6f3344f05aef.png
#text
単一の値を入力して、キーの横方向の長さを設定します。

#head2 縦方向のサイズ指定
#image url=https://i.gyazo.com/7e94cff01e3afb8747f2619a501d0d28.png
#text
スペースで区切って値を複数入力すると、1つ目の値が横方向の長さ、2つ目の値が縦方向の長さになります。

#image url=https://i.gyazo.com/38966a8c0395246d8710932433844a9b.png
#text
このような、縦横に大きいキーも作れます。

#head2 ISO Enter
#image url=https://i.gyazo.com/49755b31708a7bf5a0feda468918d441.png
#text
特殊な形状のキーとして、ISO Enterのキーが用意されています。
shape欄にisoEnterと入力します。

#-------
#section キーIDとキーインデクスについて

#text
レイアウトエディタ上の各キーは識別のための重複しないIDを持っています。またキーが物理キーボードのどのキーに対応するかを決めるため、キーインデクスの値を持っています。キーインデクスはファームウェアの設定を行った際に各キーに対して自動で値が割り当てられます。

#image url=https://i.gyazo.com/984ab2191561061abf7ee2f70dbd42d4.png

#text
キーIDをどのように指定するかを決めるモードが2種類あり、autoモードの場合はキーインデクスを元にキーIDが決められます。manualモードの場合、各キーに対して任意のキーIDを指定できます。

#-------
#section 編集モード

#image url=https://i.gyazo.com/b72930938d56ae086e9aeba2b55d2cfa.png

#text
レイアウトエディタには5つの編集モードがあり、編集モードによってマウスで行われる操作が変わります。

#table
select|クリックすることでキーや点を選択します。
move|ドラッグでキーや点を移動します。
key|クリックすることでキーを新たに配置していきます。
shape|クリックで外形の点を追加していきます。 外形を正しく入力するには、開始点をクリックしてポリゴンを閉じる必要があります。
delete|クリックしたキーや点を削除します。
shape_ex|パスによる追加の外形を編集します。


#-------
#section グループトランスフォーム機能

#text
キーをグループに所属させ、グループに対して座標変換を適用する機能です。

#image url=https://i.gyazo.com/0a595286c7824e61538661e451b4cc84.png

#text
デフォルトではキーはどのグループにも所属しておらず、座標変換は適用されません。

#image url=https://i.gyazo.com/3b11a57910006df7a2f3541aa92b63bb.png

#text
いくつかのキーをグループに所属させ、座標変換を適用した例です。
グループを選択している場合、原点や座標軸がグループのローカル座標系での表示になります。

#-------
#section ミラーレイアウト機能

#image url=https://i.gyazo.com/254054f3317d890e35b807b029175f5d.png

#text
キーをグループに所属させた状態で、mirrorオプションにチェックを入れると、
絶対座標でのY軸を中心として線対称の位置に配置されたキーが生成されます。
対称に配置されたキーは左右で同期しており、片方を移動するともう片方のキーも座標が更新されます。


#-------
#section 外形の描き方

#image url=https://i.gyazo.com/fcc775c626678183757b2172d209d020.png

#text
編集モードをshapeにして、クリックでポリゴンを入力していきます。開始点を入力し、中間の点をいくつか入力したのち、最後は開始点をクリックしてポリゴンを閉じてください。閉じていないポリゴンは無効な形状として削除されます。

#image url=https://i.gyazo.com/c4fe8025467696b039358c888102ccc8.png

#text
外形は任意の頂点数のポリゴンで指定でき、また複数のポリゴンを追加できます。

#image url=https://i.gyazo.com/7e8b77e657d8d9783c0b8c581a83814a.png

#text
プロファイルに含まれるレイアウトを編集している場合、メイン画面に戻ると表示を確認できます。プロファイルを保存するのを忘れないようにしましょう。

#--------
#section レイアウトの更新

#text
プロファイル固有のレイアウトに対して、プロジェクトが持っているレイアウトを取り込んで上書きする機能があります。
プロファイルが参照しているプロジェクトパッケージでキーレイアウトや外形の定義に更新があった際に、それを反映させることができます。

#image url=https://i.gyazo.com/2ac5db16dc04e2674daf51d6cb7540e1.png

#text
レイアウト画面でメニューから、'copy from project layout'を選択します。

#image url=https://i.gyazo.com/176a16de924e312a51cbbdff54bf290a.png

#text
プロジェクトに含まれるレイアウトを選択するダイアログが表示されます。取り込みたいレイアウトを選んで'Apply'ボタンを押します。
編集中のレイアウトが選択したプロジェクトレイアウトで置き換えられます。


#--------
#section パスによる外形の設定

#text
ポリゴンによる形状では丸みのついたコーナーなど曲線を含む外形を表現できないため、任意のパスを指定して外形を定義する機能が追加されました。

#image url=https://i.gyazo.com/9ef29d65343e286dff6d79c714c3abfc.png

#text
編集モードで、'shape_ex'を選択すると、右の列に追加の外形を設定するUIが表示されます。
パスコマンド入力欄と座標変換の設定UIがあります。

#rawHtml
<div>
パスコマンド入力欄には、SVGのパスコマンド構文に従ってパスを書き込みます。<br/>
パスコマンドの詳細は、<a href=https://developer.mozilla.org/ja/docs/Web/SVG/Attribute/d target="_blank">MDNのドキュメント</a>を参照してください。
</div>

#text
以下では簡単なパスの書き方の例をいくつか示します。また、グラフィックソフトで作成したSVGファイルからパスコマンドの定義を取り込む方法も併せて紹介します。

#head2 矩形

#rawHtml
<div class="extraStyle__pathExampleBox">
  <img src="https://i.gyazo.com/b85e5213c09f3cead4883d0c0a60a7b2.png" />
  <pre>
M 0,0
L 60,0
L 60,40
L 0,40
Z
  </pre>
</div>


#text
Mコマンド, Lコマンド, Zコマンドを使用します。
M <X>,<Y> パスの開始点を指定
L <X>,<Y> 線をひく
Z  パスを閉じる


#head2 角を丸めた矩形(2次ベジエ曲線を使用)

#rawHtml
<div class="extraStyle__pathExampleBox">
  <img src="https://i.gyazo.com/017ce958ed9f7939b4bfbdbbf621b562.png" />
  <pre>
M 10,0
L 50,0
Q 60,0 60,10
L 60,30
Q 60,40 50,40
L 10,40
Q 0,40 0,30
L 0,10
Q 0,0 10,0
Z
  </pre>
</div>

#text
Qコマンドを使用して、2次ベジエ曲線による角の丸めを表現できます。
Q <制御点X>, <制御点Y>  <到達点X>,<到達点Y>


#head2 角を丸めた矩形(円弧を使用)

#rawHtml
<div class="extraStyle__pathExampleBox">
  <img src="https://i.gyazo.com/3a7beb4fd9be81a02e5679aa68fb613e.png" />
  <pre>
M 10,0
L 50,0
A 10,10 0,0,1 60,10
L 60,30
A 10,10 0,0,1 50,40
L 10,40
A 10,10 0,0,1 0,30
L 0,10
A 10,10 0,0,1 10,0
Z
  </pre>
</div>

#text
Aコマンドを使用して、円弧による角の丸めを表現できます。
A <半径X>,<半径Y> <x-axis-rotation>,<large-arc-flag>,<sweep-flag> <到達点X>,<到達点Y>
x-axis-rotationは楕円の傾き,large-arc-flagは大きい方の円弧かどうかのフラグ、sweep-flagは時計回りかどうかのフラグです。

#head2 複数の形状

#rawHtml
<div class="extraStyle__pathExampleBox">
  <img src="https://i.gyazo.com/9f7909d653b75ae3f2ef56f953022006.png" />
  <pre>
M 0,0
L 60, 0
L 60, 40
L 0, 40
Z
M 0,50
L 60, 50
L 60, 90
L 0, 90
Z
  </pre>
</div>

#text
Zコマンドでパスを閉じたあと、さらに他のパスを記述すると複数の形状を定義できます。

#head2 くり抜き

#rawHtml
<div class="extraStyle__pathExampleBox">
  <img src="https://i.gyazo.com/7123c391f6894163aa9b4406a71e8c14.png" />
  <pre>
M 0,0
L 60, 0
L 60, 70
L 0, 70
Z
M 10, 40
L 10, 60
L 50, 60
L 50, 40
Z
  </pre>
</div>

#text
外側のパスを反時計回り、内側のパスを時計回りで定義すると、外側のパスを内側のパスでくり抜くことができます。


#head2 グラフィックソフトで作成した外形の取り込み


#image url=https://i.gyazo.com/b6e27eaf36b77d3badcde4042b486fe9.png

#text
ベクターグラフィックスソフトで外形を書きます。円や矩形などの形状はパスに変換しておきます。また、複数のパスは結合して単一化しておきます。
SVGファイルを書き出します。

#image url=https://i.gyazo.com/3167287cfbd121e69550724642440e51.png

#text
SVGファイルをテキストエディタで開き、<path d="..." のdの値にパスコマンドが書かれているので、この部分のテキストをコピーします。

#image url=https://i.gyazo.com/a6ecea9afed0bdf89cc8931fc45d387b.png

#text
パスコマンド入力欄にテキストを貼り付けて、座標変換のオプションを適宜設定します。


#head2  グラフィックソフトで作成した外形の取り込み(座標調整の例)

#image url=https://i.gyazo.com/28432e1bcfd41d0b40921e41938c359c.png

#text
外形の座標を元の設計に合わせるコツを紹介します。

#text
SVGにはmmなどの座標単位がありません。グラフィックスソフトでSVGを書き出す際には設定の調整を行ってmm単位で座標を吐かせる工夫が必要です。

#text
ここではAffinity DesignerでSVGを書き出す際の調整の例を示します。
・ページの左上を原点とみなして、Kermiteのレイアウト座標系に合わせてオブジェクトを配置します。
・SVG書き出し時のオプションで、「変形をフラット化」のオプションを有効にします。
・SVG書き出し時のオプションで、DPIを25.4に設定します。

#text
フラット化のオプションは、trasform属性を使わずに座標値をそのまま書き出させるために付与します。

#text
SVGの座標はmmではなくピクセル単位で吐き出されるようです。そこでDPIの設定によってmmベースの座標単位になるようにします。DPIの設定値を25.4にします。1インチ(=25.4mm)あたりのピクセル数が25.4になるため、1座標単位が1mmに相当する座標値が吐き出されます。

#image url=https://i.gyazo.com/a44043827c177936d2b50234adc16ccc.png

#text
これで元の設計と同じ配置の外形を再現できました。

#head2 Adobe Illustratorの場合

#text
座標系の原点の合わせ方は上記の解説と同様の方法でできそうです。
IllustratorでのSVG出力は任意のDPIの指定ができず、常に72DPIでの出力になるようです。スケーリングを合わせるためには、scaleの値に25.4/72の0.35277を設定してください。

#image url=https://i.gyazo.com/8ef0c7b7aefd456daf6a56d42368ab87.png
